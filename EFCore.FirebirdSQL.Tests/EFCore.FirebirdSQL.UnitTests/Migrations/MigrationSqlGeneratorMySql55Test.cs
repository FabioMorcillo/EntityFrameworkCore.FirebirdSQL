using System;
using FirebirdSql.Data.FirebirdClient;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Migrations.Operations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.TestUtilities;
using Microsoft.EntityFrameworkCore.TestUtilities.FakeProvider;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure.Internal;
using Xunit;
using Microsoft.EntityFrameworkCore.Internal;
using Moq;

namespace SouchProd.EntityFrameworkCore.Firebird.Tests.Migrations
{
    public class MigrationSqlGeneratorFirebird55Test : MigrationSqlGeneratorTestBase
    {
        protected override IMigrationsSqlGenerator SqlGenerator
        {
            get
            {
                var FirebirdOptions = new Mock<IFbOptions>();
                FirebirdOptions.SetupGet(opts => opts.ConnectionSettings).Returns(
                    new FbConnectionSettings(new FbConnectionStringBuilder(), new ServerVersion("2.1")));
                FirebirdOptions
                    .Setup(fn =>
                        fn.GetCreateTable(It.IsAny<ISqlGenerationHelper>(), It.IsAny<string>(), It.IsAny<string>()))
                    .Returns(
"CREATE TABLE \"People\" (" +
" \"Id\" integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY," +
" \"Discriminator\" varchar(63) NOT NULL," +
" \"FamilyId\" integer DEFAULT NULL," +
" \"Name\" varchar(4000)," +
" \"TeacherId\" integer DEFAULT NULL," +
" \"Grade\" integer DEFAULT NULL," +
" \"Occupation\" varchar(4000)," +
" \"OnPta\" smallint DEFAULT NULL," +
" PRIMARY KEY (\"Id\")," +
" KEY \"IX_People_FamilyId\" (\"FamilyId\")," +
" KEY \"IX_People_Discriminator\" (\"Discriminator\")," +
" KEY \"IX_People_TeacherId\" (\"TeacherId\")," +
" CONSTRAINT \"FK_People_PeopleFamilies_FamilyId\" FOREIGN KEY (\"FamilyId\") REFERENCES \"PeopleFamilies\" (\"Id\") ON DELETE NO ACTION," +
" CONSTRAINT \"FK_People_People_TeacherId\" FOREIGN KEY (\"TeacherId\") REFERENCES \"People\" (\"Id\") ON DELETE NO ACTION" +
" )");
                
                // type mapper
                var typeMapper = new FbTypeMapper(new RelationalTypeMapperDependencies());

                // migrationsSqlGeneratorDependencies
                var commandBuilderFactory = new RelationalCommandBuilderFactory(
                    new FakeDiagnosticsLogger<DbLoggerCategory.Database.Command>(),
                    typeMapper);
                var migrationsSqlGeneratorDependencies = new MigrationsSqlGeneratorDependencies(
                    commandBuilderFactory,
                    new FbSqlGenerationHelper(new RelationalSqlGenerationHelperDependencies()
                    , FirebirdOptions.Object),
                    typeMapper);
                
                return new FbMigrationsSqlGenerator(
                    migrationsSqlGeneratorDependencies,
                    FirebirdOptions.Object);
            }
        }

        private static FakeRelationalConnection CreateConnection(IDbContextOptions options = null)
            => new FakeRelationalConnection(options ?? CreateOptions());

        private static IDbContextOptions CreateOptions(RelationalOptionsExtension optionsExtension = null)
        {
            var optionsBuilder = new DbContextOptionsBuilder();

            ((IDbContextOptionsBuilderInfrastructure)optionsBuilder)
                .AddOrUpdateExtension(optionsExtension
                                      ?? new FakeRelationalOptionsExtension().WithConnectionString("test"));

            return optionsBuilder.Options;
        }


        public override void RenameIndexOperation_works()
        {
            base.RenameIndexOperation_works();
            
            Assert.Equal("ALTER TABLE \"PEOPLE\" DROP INDEX \"IX_People_Discriminator\";" + EOL 
                         + "ALTER TABLE \"PEOPLE\" ADD KEY \"IX_People_DiscriminatorNew\" (\"Discriminator\");" + EOL,
                Sql.ToUpper());
        }

        [Fact]
        public void AddColumnOperation_with_datetime()
        {
            Generate(new AddColumnOperation
            {
                Table = "People",
                Name = "Birthday",
                ClrType = typeof(DateTime),
                ColumnType = "datetime",
                IsNullable = false,
                DefaultValue = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
            });

            Assert.Equal("ALTER TABLE \"People\" ADD \"Birthday\" datetime NOT NULL DEFAULT '0001-01-01';" + EOL,
                Sql);
        }
    }
}

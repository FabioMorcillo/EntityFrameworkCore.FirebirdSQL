/******************************************************************************/
/***         Generated by IBExpert 2013.2.20.1 25/08/2017 22:20:31          ***/
/******************************************************************************/

SET SQL DIALECT 3;

SET NAMES UTF8;

/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR GEN_BLOGS_ID;
SET GENERATOR GEN_BLOGS_ID TO 36;

CREATE GENERATOR GEN_DATATYPESSIMPLE_ID;
SET GENERATOR GEN_DATATYPESSIMPLE_ID TO 128;

CREATE GENERATOR GEN_DATATYPESVARIABLE_ID;
SET GENERATOR GEN_DATATYPESVARIABLE_ID TO 0;

CREATE GENERATOR GEN_TABLEDOUBLETYPE_ID;
SET GENERATOR GEN_TABLEDOUBLETYPE_ID TO 27;

CREATE GENERATOR GEN_TABLEGUIDTYPE_ID;
SET GENERATOR GEN_TABLEGUIDTYPE_ID TO 20;

CREATE GENERATOR GEN_TABLEINTTYPE_ID;
SET GENERATOR GEN_TABLEINTTYPE_ID TO 10;

CREATE GENERATOR GEN_TABLESTRINGTYPE_ID;
SET GENERATOR GEN_TABLESTRINGTYPE_ID TO 4;



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE BLOGS (
    ID     INTEGER NOT NULL,
    TITLE  VARCHAR(128)
);


CREATE TABLE DATATYPESSIMPLE (
    ID             INTEGER NOT NULL,
    TYPEBOOL       SMALLINT NOT NULL,
    TYPEBOOLN      SMALLINT,
    TYPESHORT      SMALLINT NOT NULL,
    TYPESHORTN     SMALLINT,
    TYPEINT        INTEGER NOT NULL,
    TYPEINTN       INTEGER,
    TYPELONG       BIGINT NOT NULL,
    TYPELONGN      BIGINT,
    TYPEDECIMAL    DECIMAL(15,5) NOT NULL,
    TYPEDECIMALN   DECIMAL(15,5),
    TYPEDOUBLE     DOUBLE PRECISION NOT NULL,
    TYPEDOUBLEN    DOUBLE PRECISION,
    TYPEFLOAT      FLOAT NOT NULL,
    TYPEFLOATN     FLOAT,
    TYPESBYTE      SMALLINT NOT NULL,
    TYPESBYTEN     SMALLINT,
    TYPEBYTE       SMALLINT,
    TYPEBYTEN      SMALLINT,
    TYPECHAR       CHAR(10) NOT NULL,
    TYPECHARN      CHAR(10),
    TYPEDATETIME   TIMESTAMP NOT NULL,
    TYPEDATETIMEN  TIMESTAMP,
    TYPEENUM       INTEGER NOT NULL,
    TYPEENUMN      INTEGER,
    TYPEENUMBYTE   SMALLINT NOT NULL,
    TYPEENUMBYTEN  SMALLINT,
    TYPEGUID       CHAR(38) NOT NULL,
    TYPEGUIDN      CHAR(38),
    TYPETIMESPAN   TIME DEFAULT CURRENT_TIME NOT NULL,
    TYPETIMESPANN  TIME
);


CREATE TABLE DATATYPESVARIABLE (
    ID                 INTEGER NOT NULL,
    TYPESTRING         VARCHAR(4000) NOT NULL,
    TYPESTRING255      VARCHAR(255) NOT NULL,
    TYPESTRINGN        VARCHAR(4000),
    TYPESTRING255N     VARCHAR(255),
    TYPEBYTEARRAY255   BLOB SUB_TYPE 0 SEGMENT SIZE 80 NOT NULL,
    TYPEBYTEARRAY      BLOB SUB_TYPE 0 SEGMENT SIZE 80 NOT NULL,
    TYPEBYTEARRAY255N  BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    TYPEBYTEARRAYN     BLOB SUB_TYPE 0 SEGMENT SIZE 80,
    TYPEJSONARRAY      BLOB SUB_TYPE 1 SEGMENT SIZE 4096 NOT NULL,
    TYPEJSONOBJECT     BLOB SUB_TYPE 1 SEGMENT SIZE 4096 NOT NULL,
    TYPEJSONARRAYN     BLOB SUB_TYPE 1 SEGMENT SIZE 4096,
    TYPEJSONOBJECTN    BLOB SUB_TYPE 1 SEGMENT SIZE 4096
);


CREATE TABLE TABLEDOUBLETYPE (
    ID   INTEGER NOT NULL,
    DBL  DOUBLE PRECISION
);


CREATE TABLE TABLEGUIDTYPE (
    ID   INTEGER NOT NULL,
    UID  CHAR(38)
);


CREATE TABLE TABLEINTTYPE (
    ID        INTEGER NOT NULL,
    INTFIELD  INTEGER
);


CREATE TABLE TABLESTRINGTYPE (
    ID        INTEGER NOT NULL,
    STRFIELD  VARCHAR(255)
);




/******************************************************************************/
/***                              Primary Keys                              ***/
/******************************************************************************/

ALTER TABLE DATATYPESSIMPLE ADD CONSTRAINT PK_DATATYPESSIMPLE PRIMARY KEY (ID);
ALTER TABLE DATATYPESVARIABLE ADD CONSTRAINT PK_DATATYPESVARIABLE PRIMARY KEY (ID);
ALTER TABLE TABLEDOUBLETYPE ADD CONSTRAINT PK_TABLEDOUBLETYPE PRIMARY KEY (ID);
ALTER TABLE TABLEGUIDTYPE ADD CONSTRAINT PK_TABLEGUIDTYPE PRIMARY KEY (ID);
ALTER TABLE TABLEINTTYPE ADD CONSTRAINT PK_TABLEINTTYPE PRIMARY KEY (ID);
ALTER TABLE TABLESTRINGTYPE ADD CONSTRAINT PK_TABLESTRINGTYPE PRIMARY KEY (ID);


/******************************************************************************/
/***                                Triggers                                ***/
/******************************************************************************/


SET TERM ^ ;



/******************************************************************************/
/***                          Triggers for tables                           ***/
/******************************************************************************/



/* Trigger: BLOGS_BI */
CREATE TRIGGER BLOGS_BI FOR BLOGS
ACTIVE BEFORE INSERT POSITION 0
AS
DECLARE VARIABLE tmp DECIMAL(18,0);
BEGIN
  IF (NEW.ID IS NULL) THEN
    NEW.ID = GEN_ID(GEN_BLOGS_ID, 1);
  ELSE
  BEGIN
    tmp = GEN_ID(GEN_BLOGS_ID, 0);
    if (tmp < new.ID) then
      tmp = GEN_ID(GEN_BLOGS_ID, new.ID-tmp);
  END
END
^


/* Trigger: DATATYPESSIMPLE_BI */
CREATE TRIGGER DATATYPESSIMPLE_BI FOR DATATYPESSIMPLE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_datatypessimple_id,1);
end
^


/* Trigger: DATATYPESVARIABLE_BI */
CREATE TRIGGER DATATYPESVARIABLE_BI FOR DATATYPESVARIABLE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_datatypesvariable_id,1);
end
^


/* Trigger: TABLEDOUBLETYPE_BI */
CREATE TRIGGER TABLEDOUBLETYPE_BI FOR TABLEDOUBLETYPE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_tabledoubletype_id,1);
end
^


/* Trigger: TABLEGUIDTYPE_BI */
CREATE TRIGGER TABLEGUIDTYPE_BI FOR TABLEGUIDTYPE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_tableguidtype_id,1);
end
^


/* Trigger: TABLEINTTYPE_BI */
CREATE TRIGGER TABLEINTTYPE_BI FOR TABLEINTTYPE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_tableinttype_id,1);
end
^


/* Trigger: TABLESTRINGTYPE_BI */
CREATE TRIGGER TABLESTRINGTYPE_BI FOR TABLESTRINGTYPE
ACTIVE BEFORE INSERT POSITION 0
as
begin
  if (new.id is null) then
    new.id = gen_id(gen_tablestringtype_id,1);
end
^


SET TERM ; ^